{"ast":null,"code":"var _jsxFileName = \"D:\\\\KOD\\\\ReactCompleteGuide\\\\Section-21-Build-SPA-with-React-Router\\\\bigger-project-spa\\\\frontend\\\\src\\\\pages\\\\EventsPage.jsx\",\n  _s = $RefreshSig$();\nimport EventsList from \"../components/EventsList\";\nimport { json, useLoaderData } from \"react-router-dom\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EventsPage() {\n  _s();\n  const data = useLoaderData();\n  if (data.isError) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: data.message\n    }, void 0, false);\n  }\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(EventsList, {\n    events: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 10\n  }, this);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport async function EventLoader() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // throw new Response(JSON.stringify({message:\"Could not fetch events!\"}),{status:500})\n    throw json({\n      message: \"Could not fetch events!\"\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\n_c2 = EventLoader;\nexport async function submitFormAction({\n  request,\n  params\n}) {\n  const data = await request.formData();\n  const eventData = {\n    title: data.get(\"title\"),\n    image: data.get(\"image\"),\n    date: data.get(\"date\"),\n    description: data.get(\"description\")\n  };\n  data.get(\"title,\");\n  const response = await fetch(\"http://localhost:8080/events\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(eventData)\n  });\n  if (response.status === 422) {\n    return response;\n  }\n  if (!response.ok) {\n    throw json({\n      message: \"Could not save event!\"\n    }, {\n      status: 500\n    });\n  }\n  return redirect(\"..\");\n}\nvar _c, _c2;\n$RefreshReg$(_c, \"EventsPage\");\n$RefreshReg$(_c2, \"EventLoader\");","map":{"version":3,"names":["EventsList","json","useLoaderData","Fragment","_Fragment","jsxDEV","_jsxDEV","EventsPage","_s","data","isError","children","message","events","fileName","_jsxFileName","lineNumber","columnNumber","_c","EventLoader","response","fetch","ok","status","_c2","submitFormAction","request","params","formData","eventData","title","get","image","date","description","method","headers","body","JSON","stringify","redirect","$RefreshReg$"],"sources":["D:/KOD/ReactCompleteGuide/Section-21-Build-SPA-with-React-Router/bigger-project-spa/frontend/src/pages/EventsPage.jsx"],"sourcesContent":["import EventsList from \"../components/EventsList\";\r\nimport { json, useLoaderData } from \"react-router-dom\";\r\n\r\nexport default function EventsPage() {\r\n  const data = useLoaderData();\r\n  if (data.isError) {\r\n    return <>{data.message}</>;\r\n  }\r\n  const events = data.events;\r\n  return <EventsList events={events} />;\r\n}\r\nexport async function EventLoader() {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n  if (!response.ok) {\r\n    // throw new Response(JSON.stringify({message:\"Could not fetch events!\"}),{status:500})\r\n    throw json({ message: \"Could not fetch events!\" }, { status: 500 });\r\n  } else {\r\n    return response;\r\n  }\r\n}\r\nexport async function submitFormAction({ request, params }) {\r\n  const data = await request.formData();\r\n  const eventData = {\r\n    title: data.get(\"title\"),\r\n    image: data.get(\"image\"),\r\n    date: data.get(\"date\"),\r\n    description: data.get(\"description\"),\r\n  };\r\n  data.get(\"title,\");\r\n  const response =await fetch(\"http://localhost:8080/events\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(eventData),\r\n  });\r\n\r\n  if(response.status===422){\r\n    return response;\r\n  }\r\n  if (!response.ok) {\r\n    throw json({ message: \"Could not save event!\" }, { status: 500 });\r\n  }\r\n  return redirect(\"..\")\r\n}\r\n"],"mappings":";;AAAA,OAAOA,UAAU,MAAM,0BAA0B;AACjD,SAASC,IAAI,EAAEC,aAAa,QAAQ,kBAAkB;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvD,eAAe,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACnC,MAAMC,IAAI,GAAGP,aAAa,CAAC,CAAC;EAC5B,IAAIO,IAAI,CAACC,OAAO,EAAE;IAChB,oBAAOJ,OAAA,CAAAF,SAAA;MAAAO,QAAA,EAAGF,IAAI,CAACG;IAAO,gBAAG,CAAC;EAC5B;EACA,MAAMC,MAAM,GAAGJ,IAAI,CAACI,MAAM;EAC1B,oBAAOP,OAAA,CAACN,UAAU;IAACa,MAAM,EAAEA;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACvC;AAACT,EAAA,CAPuBD,UAAU;EAAA,QACnBL,aAAa;AAAA;AAAAgB,EAAA,GADJX,UAAU;AAQlC,OAAO,eAAeY,WAAWA,CAAA,EAAG;EAClC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAC5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA,MAAMrB,IAAI,CAAC;MAAEW,OAAO,EAAE;IAA0B,CAAC,EAAE;MAAEW,MAAM,EAAE;IAAI,CAAC,CAAC;EACrE,CAAC,MAAM;IACL,OAAOH,QAAQ;EACjB;AACF;AAACI,GAAA,GARqBL,WAAW;AASjC,OAAO,eAAeM,gBAAgBA,CAAC;EAAEC,OAAO;EAAEC;AAAO,CAAC,EAAE;EAC1D,MAAMlB,IAAI,GAAG,MAAMiB,OAAO,CAACE,QAAQ,CAAC,CAAC;EACrC,MAAMC,SAAS,GAAG;IAChBC,KAAK,EAAErB,IAAI,CAACsB,GAAG,CAAC,OAAO,CAAC;IACxBC,KAAK,EAAEvB,IAAI,CAACsB,GAAG,CAAC,OAAO,CAAC;IACxBE,IAAI,EAAExB,IAAI,CAACsB,GAAG,CAAC,MAAM,CAAC;IACtBG,WAAW,EAAEzB,IAAI,CAACsB,GAAG,CAAC,aAAa;EACrC,CAAC;EACDtB,IAAI,CAACsB,GAAG,CAAC,QAAQ,CAAC;EAClB,MAAMX,QAAQ,GAAE,MAAMC,KAAK,CAAC,8BAA8B,EAAE;IAC1Dc,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACV,SAAS;EAChC,CAAC,CAAC;EAEF,IAAGT,QAAQ,CAACG,MAAM,KAAG,GAAG,EAAC;IACvB,OAAOH,QAAQ;EACjB;EACA,IAAI,CAACA,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMrB,IAAI,CAAC;MAAEW,OAAO,EAAE;IAAwB,CAAC,EAAE;MAAEW,MAAM,EAAE;IAAI,CAAC,CAAC;EACnE;EACA,OAAOiB,QAAQ,CAAC,IAAI,CAAC;AACvB;AAAC,IAAAtB,EAAA,EAAAM,GAAA;AAAAiB,YAAA,CAAAvB,EAAA;AAAAuB,YAAA,CAAAjB,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}