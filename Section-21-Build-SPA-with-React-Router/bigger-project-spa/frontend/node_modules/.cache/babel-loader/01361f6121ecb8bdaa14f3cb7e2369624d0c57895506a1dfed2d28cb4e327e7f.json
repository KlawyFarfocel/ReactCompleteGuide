{"ast":null,"code":"var _jsxFileName = \"D:\\\\KOD\\\\ReactCompleteGuide\\\\Section-21-Build-SPA-with-React-Router\\\\bigger-project-spa\\\\frontend\\\\src\\\\pages\\\\EventDetailPage.jsx\",\n  _s = $RefreshSig$();\nimport { defer, json, useRouteLoaderData } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function EventDetail() {\n  _s();\n  const {\n    event,\n    events\n  } = useRouteLoaderData(\"eventDetail\");\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(EventItem, {\n      event: data.event\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EventsList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(EventDetail, \"SP42t2+YEs6IFgo/PrvLllNbJZk=\", false, function () {\n  return [useRouteLoaderData];\n});\n_c = EventDetail;\nexport async function EventDetailLoader({\n  request,\n  params\n}) {\n  const id = params.eventId;\n  defer({\n    event: loadEvent(id),\n    events: loadEvents()\n  });\n}\n_c2 = EventDetailLoader;\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // throw new Response(JSON.stringify({message:\"Could not fetch events!\"}),{status:500})\n    throw json({\n      message: \"Could not fetch events!\"\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData.events;\n  }\n}\nasync function loadEvent(id) {\n  const response = await fetch(`http://localhost:8080/events/${id}`);\n  if (!response.ok) {\n    throw json({\n      message: \"Could not fetch details for selected event!\"\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData.events;\n  }\n}\nvar _c, _c2;\n$RefreshReg$(_c, \"EventDetail\");\n$RefreshReg$(_c2, \"EventDetailLoader\");","map":{"version":3,"names":["defer","json","useRouteLoaderData","EventItem","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventDetail","_s","event","events","children","data","fileName","_jsxFileName","lineNumber","columnNumber","_c","EventDetailLoader","request","params","id","eventId","loadEvent","loadEvents","_c2","response","fetch","ok","message","status","resData","$RefreshReg$"],"sources":["D:/KOD/ReactCompleteGuide/Section-21-Build-SPA-with-React-Router/bigger-project-spa/frontend/src/pages/EventDetailPage.jsx"],"sourcesContent":["import { defer, json, useRouteLoaderData } from \"react-router-dom\";\r\nimport EventItem from \"../components/EventItem\";\r\nimport EventsList from \"../components/EventsList\";\r\n\r\nexport default function EventDetail() {\r\n  const {event,events} = useRouteLoaderData(\"eventDetail\");\r\n  return (\r\n    <>\r\n      <EventItem event={data.event} />\r\n      <EventsList />\r\n    </>\r\n  );\r\n}\r\nexport async function EventDetailLoader({ request, params }) {\r\n  const id=params.eventId;\r\n  defer({\r\n    event:loadEvent(id),\r\n    events:loadEvents()\r\n  })\r\n}\r\nasync function loadEvents() {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n  if (!response.ok) {\r\n    // throw new Response(JSON.stringify({message:\"Could not fetch events!\"}),{status:500})\r\n    throw json({ message: \"Could not fetch events!\" }, { status: 500 });\r\n  } else {\r\n    const resData = await response.json();\r\n    return resData.events;\r\n  }\r\n}\r\nasync function loadEvent(id){\r\n  const response = await fetch(\r\n    `http://localhost:8080/events/${id}`\r\n  );\r\n  if (!response.ok) {\r\n    throw json(\r\n      { message: \"Could not fetch details for selected event!\" },\r\n      { status: 500 }\r\n    );\r\n  } else {\r\n    const resData = await response.json();\r\n    return resData.events;\r\n  }\r\n}\r\n"],"mappings":";;AAAA,SAASA,KAAK,EAAEC,IAAI,EAAEC,kBAAkB,QAAQ,kBAAkB;AAClE,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,eAAe,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACpC,MAAM;IAACC,KAAK;IAACC;EAAM,CAAC,GAAGV,kBAAkB,CAAC,aAAa,CAAC;EACxD,oBACEI,OAAA,CAAAE,SAAA;IAAAK,QAAA,gBACEP,OAAA,CAACH,SAAS;MAACQ,KAAK,EAAEG,IAAI,CAACH;IAAM;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChCZ,OAAA,CAACF,UAAU;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACd,CAAC;AAEP;AAACR,EAAA,CARuBD,WAAW;EAAA,QACVP,kBAAkB;AAAA;AAAAiB,EAAA,GADnBV,WAAW;AASnC,OAAO,eAAeW,iBAAiBA,CAAC;EAAEC,OAAO;EAAEC;AAAO,CAAC,EAAE;EAC3D,MAAMC,EAAE,GAACD,MAAM,CAACE,OAAO;EACvBxB,KAAK,CAAC;IACJW,KAAK,EAACc,SAAS,CAACF,EAAE,CAAC;IACnBX,MAAM,EAACc,UAAU,CAAC;EACpB,CAAC,CAAC;AACJ;AAACC,GAAA,GANqBP,iBAAiB;AAOvC,eAAeM,UAAUA,CAAA,EAAG;EAC1B,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAC5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA,MAAM7B,IAAI,CAAC;MAAE8B,OAAO,EAAE;IAA0B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACrE,CAAC,MAAM;IACL,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAAC3B,IAAI,CAAC,CAAC;IACrC,OAAOgC,OAAO,CAACrB,MAAM;EACvB;AACF;AACA,eAAea,SAASA,CAACF,EAAE,EAAC;EAC1B,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CACzB,gCAA+BN,EAAG,EACrC,CAAC;EACD,IAAI,CAACK,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM7B,IAAI,CACR;MAAE8B,OAAO,EAAE;IAA8C,CAAC,EAC1D;MAAEC,MAAM,EAAE;IAAI,CAChB,CAAC;EACH,CAAC,MAAM;IACL,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAAC3B,IAAI,CAAC,CAAC;IACrC,OAAOgC,OAAO,CAACrB,MAAM;EACvB;AACF;AAAC,IAAAO,EAAA,EAAAQ,GAAA;AAAAO,YAAA,CAAAf,EAAA;AAAAe,YAAA,CAAAP,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}