{"ast":null,"code":"var _jsxFileName = \"D:\\\\KOD\\\\ReactCompleteGuide\\\\Section-21-Build-SPA-with-React-Router\\\\bigger-project-spa\\\\frontend\\\\src\\\\pages\\\\EventsPage.jsx\",\n  _s = $RefreshSig$();\nimport EventsList from \"../components/EventsList\";\nimport { Await, defer, json, useLoaderData } from \"react-router-dom\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EventsPage() {\n  _s();\n  const data = useLoaderData();\n  if (data.isError) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: data.message\n    }, void 0, false);\n  }\n  return /*#__PURE__*/_jsxDEV(Await, {\n    children: [/*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 1\n    }, this), \";\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 10\n  }, this);\n  return;\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // throw new Response(JSON.stringify({message:\"Could not fetch events!\"}),{status:500})\n    throw json({\n      message: \"Could not fetch events!\"\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport function EventLoader() {\n  return defer({\n    events: loadEvents()\n  });\n}\n_c2 = EventLoader;\nvar _c, _c2;\n$RefreshReg$(_c, \"EventsPage\");\n$RefreshReg$(_c2, \"EventLoader\");","map":{"version":3,"names":["EventsList","Await","defer","json","useLoaderData","Fragment","_Fragment","jsxDEV","_jsxDEV","EventsPage","_s","data","isError","children","message","events","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","status","EventLoader","_c2","$RefreshReg$"],"sources":["D:/KOD/ReactCompleteGuide/Section-21-Build-SPA-with-React-Router/bigger-project-spa/frontend/src/pages/EventsPage.jsx"],"sourcesContent":["import EventsList from \"../components/EventsList\";\r\nimport { Await, defer, json, useLoaderData } from \"react-router-dom\";\r\n\r\nexport default function EventsPage() {\r\n  const data = useLoaderData();\r\n  if (data.isError) {\r\n    return <>{data.message}</>;\r\n  }\r\n  return <Await>\r\n<EventsList events={events} />;\r\n  </Await>\r\n  return \r\n}\r\nasync function loadEvents(){\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n  if (!response.ok) {\r\n    // throw new Response(JSON.stringify({message:\"Could not fetch events!\"}),{status:500})\r\n    throw json({ message: \"Could not fetch events!\" }, { status: 500 });\r\n  } else {\r\n    return response;\r\n  }\r\n}\r\nexport function EventLoader() {\r\n  return defer({\r\n    events: loadEvents()\r\n  })\r\n}\r\n"],"mappings":";;AAAA,OAAOA,UAAU,MAAM,0BAA0B;AACjD,SAASC,KAAK,EAAEC,KAAK,EAAEC,IAAI,EAAEC,aAAa,QAAQ,kBAAkB;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErE,eAAe,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACnC,MAAMC,IAAI,GAAGP,aAAa,CAAC,CAAC;EAC5B,IAAIO,IAAI,CAACC,OAAO,EAAE;IAChB,oBAAOJ,OAAA,CAAAF,SAAA;MAAAO,QAAA,EAAGF,IAAI,CAACG;IAAO,gBAAG,CAAC;EAC5B;EACA,oBAAON,OAAA,CAACP,KAAK;IAAAY,QAAA,gBACfL,OAAA,CAACR,UAAU;MAACe,MAAM,EAAEA;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,KAC5B;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;EACR;AACF;AAACT,EAAA,CATuBD,UAAU;EAAA,QACnBL,aAAa;AAAA;AAAAgB,EAAA,GADJX,UAAU;AAUlC,eAAeY,UAAUA,CAAA,EAAE;EACzB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAC5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA,MAAMrB,IAAI,CAAC;MAAEW,OAAO,EAAE;IAA0B,CAAC,EAAE;MAAEW,MAAM,EAAE;IAAI,CAAC,CAAC;EACrE,CAAC,MAAM;IACL,OAAOH,QAAQ;EACjB;AACF;AACA,OAAO,SAASI,WAAWA,CAAA,EAAG;EAC5B,OAAOxB,KAAK,CAAC;IACXa,MAAM,EAAEM,UAAU,CAAC;EACrB,CAAC,CAAC;AACJ;AAACM,GAAA,GAJeD,WAAW;AAAA,IAAAN,EAAA,EAAAO,GAAA;AAAAC,YAAA,CAAAR,EAAA;AAAAQ,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}