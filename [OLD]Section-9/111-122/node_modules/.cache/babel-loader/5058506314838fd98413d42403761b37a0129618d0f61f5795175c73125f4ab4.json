{"ast":null,"code":"var _jsxFileName = \"D:\\\\KOD\\\\ReactCompleteGuide\\\\Section-9\\\\111-122\\\\src\\\\App.js\";\nimport { useState } from 'react';\nimport logo from './assets/investment-calculator-logo.png';\nimport SavingsForm from './components/SavingsForm';\nimport SavingsResultTable from './components/SavingsResultTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  let yearlyData = [];\n  const calculateHandler = (e, userInput) => {\n    setYearlyData([]);\n    // Should be triggered when form is submitted\n    e.preventDefault();\n    // You might not directly want to bind it to the submit event on the form though...\n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n    console.log(\"before:\" + currentSavings);\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      console.log(\"after:\" + currentSavings);\n      yearlyData + -setYearlyData(prevState => [...prevState, {\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      }]);\n    }\n    // do something with yearlyData ...\n  };\n\n  const resetHandler = () => {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Investment Calculator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SavingsForm, {\n      onCalculateClick: calculateHandler,\n      onResetClick: resetHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SavingsResultTable, {\n      yearlyData: yearlyData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","logo","SavingsForm","SavingsResultTable","jsxDEV","_jsxDEV","App","yearlyData","calculateHandler","e","userInput","setYearlyData","preventDefault","currentSavings","yearlyContribution","expectedReturn","duration","console","log","i","yearlyInterest","prevState","year","savingsEndOfYear","resetHandler","children","className","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onCalculateClick","onResetClick","_c","$RefreshReg$"],"sources":["D:/KOD/ReactCompleteGuide/Section-9/111-122/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport logo from './assets/investment-calculator-logo.png';\nimport SavingsForm from './components/SavingsForm';\nimport SavingsResultTable from './components/SavingsResultTable';\n\nfunction App() {\n  let yearlyData=[];\n  const calculateHandler = (e,userInput) => {\n    setYearlyData([]);\n    // Should be triggered when form is submitted\n    e.preventDefault();\n    // You might not directly want to bind it to the submit event on the form though...\n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n    console.log (\"before:\"+currentSavings);\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      console.log (\"after:\"+currentSavings);\n      yearlyData+-\n      setYearlyData(prevState => [\n        ...prevState,\n        {          \n          year: i + 1,\n          yearlyInterest: yearlyInterest,\n          savingsEndOfYear: currentSavings,\n          yearlyContribution: yearlyContribution,\n        }\n      ])\n    }\n   // do something with yearlyData ...\n  };\n  const resetHandler=()=>{\n  }\n  return (\n    <div>\n      <header className=\"header\">\n        <img src={logo} alt=\"logo\" />\n        <h1>Investment Calculator</h1>\n      </header>\n\n      <SavingsForm onCalculateClick={calculateHandler} onResetClick={resetHandler}/>\n      <SavingsResultTable yearlyData={yearlyData}/>\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n\n\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,IAAI,MAAM,yCAAyC;AAC1D,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,kBAAkB,MAAM,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjE,SAASC,GAAGA,CAAA,EAAG;EACb,IAAIC,UAAU,GAAC,EAAE;EACjB,MAAMC,gBAAgB,GAAGA,CAACC,CAAC,EAACC,SAAS,KAAK;IACxCC,aAAa,CAAC,EAAE,CAAC;IACjB;IACAF,CAAC,CAACG,cAAc,CAAC,CAAC;IAClB;;IAEA,IAAIC,cAAc,GAAG,CAACH,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACpD,MAAMI,kBAAkB,GAAG,CAACJ,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC9D,MAAMK,cAAc,GAAG,CAACL,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,MAAMM,QAAQ,GAAG,CAACN,SAAS,CAAC,UAAU,CAAC;IACvCO,OAAO,CAACC,GAAG,CAAE,SAAS,GAACL,cAAc,CAAC;;IAEtC;IACA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,QAAQ,EAAEG,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGP,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIO,cAAc,GAAGN,kBAAkB;MACrDG,OAAO,CAACC,GAAG,CAAE,QAAQ,GAACL,cAAc,CAAC;MACrCN,UAAU,GAAC,CACXI,aAAa,CAACU,SAAS,IAAI,CACzB,GAAGA,SAAS,EACZ;QACEC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAEV,cAAc;QAChCC,kBAAkB,EAAEA;MACtB,CAAC,CACF,CAAC;IACJ;IACD;EACD,CAAC;;EACD,MAAMU,YAAY,GAACA,CAAA,KAAI,CACvB,CAAC;EACD,oBACEnB,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MAAQqB,SAAS,EAAC,QAAQ;MAAAD,QAAA,gBACxBpB,OAAA;QAAKsB,GAAG,EAAE1B,IAAK;QAAC2B,GAAG,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC7B3B,OAAA;QAAAoB,QAAA,EAAI;MAAqB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC,eAET3B,OAAA,CAACH,WAAW;MAAC+B,gBAAgB,EAAEzB,gBAAiB;MAAC0B,YAAY,EAAEV;IAAa;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAC9E3B,OAAA,CAACF,kBAAkB;MAACI,UAAU,EAAEA;IAAW;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAK1C,CAAC;AAEV;AAACG,EAAA,GAjDQ7B,GAAG;AAmDZ,eAAeA,GAAG;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}