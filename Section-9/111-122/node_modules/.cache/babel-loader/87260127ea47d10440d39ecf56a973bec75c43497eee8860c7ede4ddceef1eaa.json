{"ast":null,"code":"var _jsxFileName = \"D:\\\\KOD\\\\ReactCompleteGuide\\\\Section-9\\\\111-122\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport logo from './assets/investment-calculator-logo.png';\nimport SavingsForm from './components/SavingsForm';\nimport SavingsResultTable from './components/SavingsResultTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const yearlyData = []; // per-year results\n  const [updatedYearlyData, setUpdatedYearlyData] = useState([]);\n  const [userInput, setUserInput] = useState();\n  const calculateHandler = (e, userInput) => {\n    // Should be triggered when form is submitted\n    e.preventDefault();\n    // You might not directly want to bind it to the submit event on the form though...\n    setUserInput(userInput);\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n    setUpdatedYearlyData(prevState => yearlyData);\n\n    // do something with yearlyDsata ...\n  };\n\n  const resetHandler = () => {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Investment Calculator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SavingsForm, {\n      onCalculateClick: calculateHandler,\n      onResetClick: resetHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), !userInput ? \"\" : \"\", /*#__PURE__*/_jsxDEV(SavingsResultTable, {\n      yearlyData: updatedYearlyData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"8gEqJlsw+w0Q/IJ07H7IvWLU42U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","logo","SavingsForm","SavingsResultTable","jsxDEV","_jsxDEV","App","_s","yearlyData","updatedYearlyData","setUpdatedYearlyData","userInput","setUserInput","calculateHandler","e","preventDefault","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","prevState","resetHandler","children","className","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onCalculateClick","onResetClick","_c","$RefreshReg$"],"sources":["D:/KOD/ReactCompleteGuide/Section-9/111-122/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport logo from './assets/investment-calculator-logo.png';\nimport SavingsForm from './components/SavingsForm';\nimport SavingsResultTable from './components/SavingsResultTable';\n\nfunction App() {\n  const yearlyData = []; // per-year results\n  const [updatedYearlyData,setUpdatedYearlyData]=useState([]);\n  const [userInput,setUserInput]=useState()\n  const calculateHandler = (e,userInput) => {\n    // Should be triggered when form is submitted\n    e.preventDefault();\n    // You might not directly want to bind it to the submit event on the form though...\n    setUserInput(userInput)\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n    setUpdatedYearlyData(prevState =>yearlyData);\n   \n   // do something with yearlyDsata ...\n  };\n  const resetHandler=()=>{\n  }\n  return (\n    \n    <div>\n      <header className=\"header\">\n        <img src={logo} alt=\"logo\" />\n        <h1>Investment Calculator</h1>\n      </header>\n\n      <SavingsForm onCalculateClick={calculateHandler} onResetClick={resetHandler}/>\n      {(!userInput?\n        \"\"\n        :\n        \"\"\n      )}\n      <SavingsResultTable yearlyData={updatedYearlyData}/>\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n\n\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,IAAI,MAAM,yCAAyC;AAC1D,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,kBAAkB,MAAM,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjE,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;EACvB,MAAM,CAACC,iBAAiB,EAACC,oBAAoB,CAAC,GAACV,QAAQ,CAAC,EAAE,CAAC;EAC3D,MAAM,CAACW,SAAS,EAACC,YAAY,CAAC,GAACZ,QAAQ,CAAC,CAAC;EACzC,MAAMa,gBAAgB,GAAGA,CAACC,CAAC,EAACH,SAAS,KAAK;IACxC;IACAG,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB;IACAH,YAAY,CAACD,SAAS,CAAC;IACvB,IAAIK,cAAc,GAAG,CAACL,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACpD,MAAMM,kBAAkB,GAAG,CAACN,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC9D,MAAMO,cAAc,GAAG,CAACP,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,MAAMQ,QAAQ,GAAG,CAACR,SAAS,CAAC,UAAU,CAAC;;IAEvC;IACA,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;MACrDT,UAAU,CAACc,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAER,cAAc;QAChCC,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;IACAP,oBAAoB,CAACe,SAAS,IAAGjB,UAAU,CAAC;;IAE7C;EACD,CAAC;;EACD,MAAMkB,YAAY,GAACA,CAAA,KAAI,CACvB,CAAC;EACD,oBAEErB,OAAA;IAAAsB,QAAA,gBACEtB,OAAA;MAAQuB,SAAS,EAAC,QAAQ;MAAAD,QAAA,gBACxBtB,OAAA;QAAKwB,GAAG,EAAE5B,IAAK;QAAC6B,GAAG,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC7B7B,OAAA;QAAAsB,QAAA,EAAI;MAAqB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC,eAET7B,OAAA,CAACH,WAAW;MAACiC,gBAAgB,EAAEtB,gBAAiB;MAACuB,YAAY,EAAEV;IAAa;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,EAC5E,CAACvB,SAAS,GACV,EAAE,GAEF,EAAE,eAEJN,OAAA,CAACF,kBAAkB;MAACK,UAAU,EAAEC;IAAkB;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAKjD,CAAC;AAEV;AAAC3B,EAAA,CArDQD,GAAG;AAAA+B,EAAA,GAAH/B,GAAG;AAuDZ,eAAeA,GAAG;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}